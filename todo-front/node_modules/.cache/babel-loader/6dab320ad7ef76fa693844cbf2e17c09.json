{"ast":null,"code":"import axios from 'axios';\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return axios.get('http://localhost:8080/basicauth', {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  executeJwtAuthenticationService(username, password) {\n    return axios.post('http://localhost:8080/authenticate', {\n      username,\n      password\n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  }\n\n  registerSuccessfullLogin(username, password) {\n    //console.log('registerSuccessfullLogin');\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors(this.createJWTToken(token));\n  }\n\n  createJWTToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors(basicAuthHeader) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/zozo2/Documents/Projet/Udemy/todo-app/frontend/todo-app/src/components/todo/AuthenticationService.js"],"names":["axios","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","executeJwtAuthenticationService","post","window","btoa","registerSuccessfullLogin","sessionStorage","setItem","setupAxiosInterceptors","registerSuccessfulLoginForJwt","token","createJWTToken","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","basicAuthHeader","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAClD,WAAOJ,KAAK,CAACK,GAAN,CAAU,iCAAV,EAA6C;AAAEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC;AAAjB;AAAX,KAA7C,CAAP;AACH;;AAEDK,EAAAA,+BAA+B,CAACN,QAAD,EAAWC,QAAX,EAAqB;AAChD,WAAOJ,KAAK,CAACU,IAAN,CAAW,oCAAX,EAAiD;AACpDP,MAAAA,QADoD;AAEpDC,MAAAA;AAFoD,KAAjD,CAAP;AAIH;;AAEDI,EAAAA,oBAAoB,CAACL,QAAD,EAAWC,QAAX,EAAqB;AACrC,WAAO,WAAWO,MAAM,CAACC,IAAP,CAAYT,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AAEH;;AAEDS,EAAAA,wBAAwB,CAACV,QAAD,EAAWC,QAAX,EAAqB;AAEzC;AACAU,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CZ,QAA5C;AACA,SAAKa,sBAAL,CAA4B,KAAKR,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC,CAA5B;AACH;;AAEDa,EAAAA,6BAA6B,CAACd,QAAD,EAAWe,KAAX,EAAkB;AAC3CJ,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CZ,QAA5C;AACA,SAAKa,sBAAL,CAA4B,KAAKG,cAAL,CAAoBD,KAApB,CAA5B;AACH;;AAEDC,EAAAA,cAAc,CAACD,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AAEH;;AAEDE,EAAAA,MAAM,GAAG;AACLN,IAAAA,cAAc,CAACO,UAAf,CAA0B,mBAA1B;AACH;;AAEDC,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGT,cAAc,CAACU,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGT,cAAc,CAACU,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDP,EAAAA,sBAAsB,CAACU,eAAD,EAAkB;AAGpC1B,IAAAA,KAAK,CAAC2B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKR,cAAL,EAAJ,EAA2B;AACvBQ,QAAAA,MAAM,CAACxB,OAAP,CAAeC,aAAf,GAA+BmB,eAA/B;AACH;;AACD,aAAOI,MAAP;AACH,KANL;AASH;;AA/DuB;;AAkE5B,eAAe,IAAI7B,qBAAJ,EAAf","sourcesContent":["import axios from 'axios';\r\n\r\n\r\nclass AuthenticationService {\r\n\r\n    executeBasicAuthenticationService(username, password) {\r\n        return axios.get('http://localhost:8080/basicauth', { headers: { authorization: this.createBasicAuthToken(username, password) } })\r\n    }\r\n\r\n    executeJwtAuthenticationService(username, password) {\r\n        return axios.post('http://localhost:8080/authenticate', {\r\n            username,\r\n            password\r\n        })\r\n    }\r\n\r\n    createBasicAuthToken(username, password) {\r\n        return 'Basic ' + window.btoa(username + \":\" + password)\r\n\r\n    }\r\n\r\n    registerSuccessfullLogin(username, password) {\r\n\r\n        //console.log('registerSuccessfullLogin');\r\n        sessionStorage.setItem('authenticatedUser', username);\r\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\r\n    }\r\n\r\n    registerSuccessfulLoginForJwt(username, token) {\r\n        sessionStorage.setItem('authenticatedUser', username);\r\n        this.setupAxiosInterceptors(this.createJWTToken(token));\r\n    }\r\n\r\n    createJWTToken(token) {\r\n        return 'Bearer ' + token\r\n\r\n    }\r\n\r\n    logout() {\r\n        sessionStorage.removeItem('authenticatedUser');\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem('authenticatedUser');\r\n        if (user === null) return false\r\n        return true\r\n    }\r\n\r\n    getLoggedInUserName() {\r\n        let user = sessionStorage.getItem('authenticatedUser');\r\n        if (user === null) return ''\r\n        return user\r\n    }\r\n\r\n    setupAxiosInterceptors(basicAuthHeader) {\r\n\r\n\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.authorization = basicAuthHeader\r\n                }\r\n                return config\r\n            }\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}