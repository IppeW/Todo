{"ast":null,"code":"import axios from 'axios';\nimport Axios from 'axios';\n\nclass AuthentificationService {\n  registerSuccessfullLogin(username, password) {\n    console.log('registerSuccessfullLogin');\n    sessionStorage.setItem('authenticatedUser', username);\n  }\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterseptors() {\n    let username = 'meddi';\n    let password = 'dummy';\n    let basicAuthHeader = 'Basic ' + window.btoa(username + \":\" + password);\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n    });\n  }\n\n}\n\nexport default new AuthentificationService();","map":{"version":3,"sources":["C:/Users/zozo2/Documents/Projet/Udemy/todo-app/frontend/todo-app/src/components/todo/AuthentificationService.js"],"names":["axios","Axios","AuthentificationService","registerSuccessfullLogin","username","password","console","log","sessionStorage","setItem","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","setupAxiosInterseptors","basicAuthHeader","window","btoa","interceptors","request","use","config","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,uBAAN,CAA8B;AAC1BC,EAAAA,wBAAwB,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACzCC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAC,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CL,QAA5C;AACH;;AAEDM,EAAAA,MAAM,GAAG;AACLF,IAAAA,cAAc,CAACG,UAAf,CAA0B,mBAA1B;AACH;;AAEDC,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGL,cAAc,CAACM,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGL,cAAc,CAACM,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDG,EAAAA,sBAAsB,GAAG;AAErB,QAAIZ,QAAQ,GAAG,OAAf;AACA,QAAIC,QAAQ,GAAG,OAAf;AACA,QAAIY,eAAe,GAAG,WAAWC,MAAM,CAACC,IAAP,CAAYf,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAjC;AAEAL,IAAAA,KAAK,CAACoB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKX,cAAL,EAAJ,EAA2B;AACvBW,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BR,eAA/B;AACH;AACJ,KALL;AAQH;;AApCyB;;AAuC9B,eAAe,IAAIf,uBAAJ,EAAf","sourcesContent":["import axios from 'axios';\r\nimport Axios from 'axios';\r\n\r\nclass AuthentificationService {\r\n    registerSuccessfullLogin(username, password) {\r\n        console.log('registerSuccessfullLogin');\r\n        sessionStorage.setItem('authenticatedUser', username);\r\n    }\r\n\r\n    logout() {\r\n        sessionStorage.removeItem('authenticatedUser');\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem('authenticatedUser');\r\n        if (user === null) return false\r\n        return true\r\n    }\r\n\r\n    getLoggedInUserName() {\r\n        let user = sessionStorage.getItem('authenticatedUser');\r\n        if (user === null) return ''\r\n        return user\r\n    }\r\n\r\n    setupAxiosInterseptors() {\r\n\r\n        let username = 'meddi'\r\n        let password = 'dummy'\r\n        let basicAuthHeader = 'Basic ' + window.btoa(username + \":\" + password)\r\n\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.authorization = basicAuthHeader\r\n                }\r\n            }\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default new AuthentificationService()"]},"metadata":{},"sourceType":"module"}